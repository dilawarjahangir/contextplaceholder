Hi your task is to create prompt based on metadata.

Here are some guidelines for prompt creation:

Prompt Creation Guidelines: 
Ensure the prompt is open-ended and requires a coding response.
We need model breaking in Accuracy or Instruction Following metrics at least %50 of the turns.
As before, prompts should be open-ended coding prompts covering the domains noted below.
Please tag the category of the prompt in terms of the taxonomy  (see below for definitions)
Please tag the difficulty as easy/medium/hard (see below for definitions)
Please add an annotation that includes the list of programming languages involved in the problem. 
Please add an annotation regarding whether the user expects the response to be executable out-of-the-box. (Examples where this might not be the case: user is providing a natural language response like a code review, User shows only a small snippet of a broader executable program, etc.)

Following are the type of prompt structure that will be given in metadata

Code Generation prompt guidelines:

Code generation / synthesis
Code generation, also known as code synthesis, is the process of automatically generating code that is executable. This process is based on various inputs, which can include natural language descriptions, diagrams, existing code, or other specifications. We distinguish from code editing (below).
Code completion
Text to code
Text-to-SQL


Metadata
Topic: Code generation
Domain: Web Development
batchId: 2267
Subtopic: Caching Strategies
Use Case: A data engineer needs to implement advanced caching strategies to enable real-time analytics on massive streaming datasets in a futuristic ML-driven pipeline.
batchName: Batch 05
projectId: 129
Turn Length: Medium (3-6 turns)
projectName: Meta-LMSYS-Steerability
Prompt Design: Multi-turn Prompts (Last turn)
Task Difficulty: Medium
Steerability (L1): General Steerability
Steerability (L2): Compositional Instruction
Programming Language: Python

Example prompt of another task from the metadata :
```
Implement an advanced caching mechanism in Python for real-time analytics on massive streaming datasets. The cache should support:
-   Efficient key-value storage using an appropriate data structure.
-   Automatic eviction of stale data based on a least-recently-used (LRU) policy.
-   Seamless integration with a machine learning-driven predictive layer to prefetch relevant data.
  
Additionally, it should explain how this caching strategy improves performance in a futuristic ML-driven pipeline and generate sample data to demonstrate its usage.```
Above is the example prompt.


{{metadata}}


Create me a prompt based on above guide lines. Prompt should be simple and small like example prompt