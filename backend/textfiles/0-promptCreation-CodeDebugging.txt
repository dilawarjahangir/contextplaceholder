Hi your task is to create prompt based on metadata.

Here are some guidelines for prompt creation:

Prompt Creation Guidelines: 
Ensure the prompt is open-ended and requires a coding response.
We need model breaking in Accuracy or Instruction Following metrics at least %50 of the turns.
As before, prompts should be open-ended coding prompts covering the domains noted below.
Please tag the category of the prompt in terms of the taxonomy  (see below for definitions)
Please tag the difficulty as easy/medium/hard (see below for definitions)
Please add an annotation that includes the list of programming languages involved in the problem. 
Please add an annotation regarding whether the user expects the response to be executable out-of-the-box. (Examples where this might not be the case: user is providing a natural language response like a code review, User shows only a small snippet of a broader executable program, etc.)

Following are the type of prompt structure that will be given in metadata

Code Debugging prompt guidelines:
Code debugging is the process of identifying, isolating, and resolving errors, bugs, or issues in code, including debugging and troubleshooting, testing, and security review.
Code debugging
(Code + Text -> Code + Text)


Example metadata
Metadata
Topic: Code debugging
Domain: Web Development
batchId: 2254
Subtopic: Template Rendering
Use Case: A data scientist needs to build an advanced neural network pipeline that automatically renders dynamic templates for real-time anomaly detection visuals.
batchName: Batch 04
projectId: 129
Turn Length: Small (1-turn)
projectName: Meta-LMSYS-Steerability
Prompt Design: System Prompt (multi-turn)
Task Difficulty: Easy
Steerability (L1): Tone Steerability
Steerability (L2): Explicit
Programming Language: Python
System Prompt:
Name: Meta Llama 3 Cutting Knowledge Date: December 2023 Today Date: <<TODAY>>

Example prompt of another task from the metadata :
```
I have a neural network code. However I am having some issues or errors in the code. Can you explain the errors and changes to be done in an encouraging way? I am really frustrated with debugging the issues in the code. 

Code:
```
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
import seaborn as sns

class AnomalyDetectionNN:
    def __init__(self):
        self.model = self.build_model()
    
    def build_model(self):
        model = tf.keras.Sequential([
            tf.keras.layers.Dense(64, activation='sigmoid'),
            tf.keras.layers.Dense(128, activation='relu'),
            tf.keras.layers.Dense(64, activation='sigmoid'),
            tf.keras.layers.Dense(2, activation='softmax')
        ])
        model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
        return model

    def train(self, X_train, y_train, X_test, y_test):
        history = self.model.fit(X_train, y_train, epochs=50, validation_data=(X_test, y_test))
        return history

    def predict(self, X):
        return self.model.predict(X).flatten()

    def visualize_predictions(self, X_test, y_test):
        predictions = self.predict(X_test)
        plt.figure(figsize=(10,6))
        sns.scatterplot(x=range(len(y_test)), y=y_test, label='Actual', color='blue')
        sns.scatterplot(x=range(len(predictions)), y=predictions, label='Predicted', color='red')
        plt.legend()
        plt.show()

np.random.seed(42)
data = np.random.randn(1000, 20)
labels = np.random.choice([0, 1], size=(1000, 1))
X_train, X_test = data[:800], data[800:]
y_train, y_test = labels[:800], labels[800:]

anomaly_nn = AnomalyDetectionNN()
anomaly_nn.train(X_train, y_train, X_test, y_test)

anomaly_nn.visualize_predictions(X_test, y_test)
```

Please provide the complete code at the end.
```


Above is the example prompt od debugging task:
{{metadata}}


Create me a prompt based on above guide lines. Prompt should be simple and small like example prompt